generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bankAccounts  BankAccount[]
  notifications Notification[]
  Account       Account[]
  Session       Session[]
  Loan          Loan[]
}

// NextAuth models (keep if you plan to use the Prisma adapter later)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BankAccount {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String        @default("Checking")
  type          String        @default("checking")
  accountNumber String?       @unique // add this (optional for smooth migration)
  balanceCents  Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]
}

model Transaction {
  id          String      @id @default(cuid())
  accountId   String
  account     BankAccount @relation(fields: [accountId], references: [id])
  amountCents Int
  description String?
  category    String?
  date        DateTime    @default(now())
  transferId  String?
  createdAt   DateTime    @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  body      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loan {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amountCents Int
  termMonths  Int
  rateBps     Int      @default(0) // 1% = 100 bps
  status      String   @default("pending") // pending | approved | rejected | active | closed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
