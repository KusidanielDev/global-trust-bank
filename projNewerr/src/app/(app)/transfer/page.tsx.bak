// app/transfer/page.tsx
import { prisma } from "@/lib/db";
import { requireSession } from "@/lib/session";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { toCents } from "@/lib/money";
("use server");

import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

async function recompute(accountId: string) {
  const sum = await prisma.transaction.aggregate({
    where: { accountId },
    _sum: { amountCents: true },
  });
  await prisma.bankAccount.update({
    where: { id: accountId },
    data: { balanceCents: sum._sum.amountCents ?? 0 },
  });
}

export async function transferAction(formData: FormData) {
  const { user } = await requireSession();
  const fromId = String(formData.get("fromId") || "");
  const toId = String(formData.get("toId") || "");
  const amountCents = Math.round(
    Math.abs(Number(formData.get("amount") || 0)) * 100
  );
  if (!fromId || !toId) throw new Error("Missing account ids");
  if (fromId === toId) throw new Error("Choose two different accounts");

  const [from, to] = await Promise.all([
    prisma.bankAccount.findFirst({
      where: { id: fromId, userId: (user as any).id },
    }),
    prisma.bankAccount.findFirst({
      where: { id: toId, userId: (user as any).id },
    }),
  ]);
  if (!from || !to) throw new Error("Accounts not found");

  const transferId = crypto.randomUUID();

  await prisma.$transaction(async (tx) => {
    await tx.transaction.createMany({
      data: [
        {
          accountId: fromId,
          amountCents: -Math.abs(amountCents),
          description: `Transfer to ${to.name}`,
          category: "Transfer",
          transferId,
        },
        {
          accountId: toId,
          amountCents: Math.abs(amountCents),
          description: `Transfer from ${from.name}`,
          category: "Transfer",
          transferId,
        },
      ],
    });
    await Promise.all([recompute(fromId), recompute(toId)]);
    await tx.notification.create({
      data: {
        userId: (user as any).id,
        title: "Transfer completed",
        body: `You moved $${(amountCents / 100).toFixed(2)} from ${
          from.name
        } to ${to.name}.`,
      },
    });
  });
}

export const dynamic = "force-dynamic";

async function doTransfer(formData: FormData) {
  "use server";
  const { user } = await requireSession();
  const userId = (user as any)?.id as string;

  const fromId = String(formData.get("from"));
  const toId = String(formData.get("to"));
  const memo = String(formData.get("memo") || "").trim();
  const cents = toCents(Number(formData.get("amount") || 0));
  if (!fromId || !toId || fromId === toId || cents <= 0)
    throw new Error("Invalid transfer data");

  const [from, to] = await Promise.all([
    prisma.account.findFirst({ where: { id: fromId, userId } }),
    prisma.account.findFirst({ where: { id: toId, userId } }),
  ]);
  if (!from || !to) throw new Error("Account not found");

  // (For production, wrap in prisma.$transaction)
  await prisma.account.update({
    where: { id: from.id },
    data: {
      balanceCents: ((from as any).balanceCents ?? 0) - cents,
      balance: ((from as any).balance ?? 0) - cents / 100,
    },
  });
  await prisma.account.update({
    where: { id: to.id },
    data: {
      balanceCents: ((to as any).balanceCents ?? 0) + cents,
      balance: ((to as any).balance ?? 0) + cents / 100,
    },
  });

  await prisma.transaction.createMany({
    data: [
      {
        accountId: from.id,
        description: memo || `Transfer to ${to.name}`,
        amountCents: -cents,
        amount: -cents / 100,
        date: new Date(),
        category: "Transfer",
      },
      {
        accountId: to.id,
        description: memo || `Transfer from ${from.name}`,
        amountCents: cents,
        amount: cents / 100,
        date: new Date(),
        category: "Transfer",
      },
    ],
  });

  revalidatePath("/(app)/dashboard");
  redirect("/(app)/dashboard");
}

export default async function TransferPage() {
  const { user } = await requireSession();
  const userId = (user as any)?.id as string;

  const accounts = await prisma.account.findMany({
    where: { userId },
    orderBy: { name: "asc" },
  });

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-gray-50 py-8">
      <div className="container mx-auto px-4 max-w-xl">
        <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl p-6 mb-8 text-center">
          <h1 className="text-2xl font-bold mb-2">Transfer Funds</h1>
          <p>Move money between your accounts instantly</p>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6">
          <form action={transferAction} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                From Account
              </label>
              <select
                name="from"
                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500 shadow-sm p-3"
              >
                {accounts.map((a: any) => (
                  <option key={a.id} value={a.id}>
                    {a.name} ••••{a.accountNumber?.slice(-4) || "0000"}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                To Account
              </label>
              <select
                name="to"
                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500 shadow-sm p-3"
              >
                {accounts.map((a: any) => (
                  <option key={a.id} value={a.id}>
                    {a.name} ••••{a.accountNumber?.slice(-4) || "0000"}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Amount (USD)
              </label>
              <div className="relative">
                <span className="absolute left-3 top-3 text-gray-500">$</span>
                <input
                  name="amount"
                  type="number"
                  min="0.01"
                  step="0.01"
                  required
                  className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500 shadow-sm p-3 pl-8"
                  placeholder="50.00"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Description (optional)
              </label>
              <input
                name="memo"
                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500 shadow-sm p-3"
                placeholder="Rent split, savings transfer, etc."
              />
            </div>

            <button className="w-full rounded-lg bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3.5 font-medium hover:from-blue-700 hover:to-blue-800 transition-all shadow-md">
              Transfer Funds
            </button>
          </form>
        </div>

        <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-gradient-to-r from-green-600 to-green-700 text-white rounded-xl p-6">
            <div className="flex items-center mb-4">
              <div className="bg-green-500 p-2 rounded-lg mr-4">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
                  />
                </svg>
              </div>
              <h3 className="text-lg font-bold">Instant Transfers</h3>
            </div>
            <p className="text-green-200 text-sm">
              Funds are transferred immediately between your accounts with no
              delays.
            </p>
          </div>
          <div className="bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-xl p-6">
            <div className="flex items-center mb-4">
              <div className="bg-purple-500 p-2 rounded-lg mr-4">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                  />
                </svg>
              </div>
              <h3 className="text-lg font-bold">Secure & Encrypted</h3>
            </div>
            <p className="text-purple-200 text-sm">
              All transactions are protected with bank-level security and
              encryption.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
